We note that this problem has an optimal substructure property, which is the key piece in solving any Dynamic Programming problems. In other words, the optimal solution can be constructed from optimal solutions of its subproblems. How to split the problem into subproblems? Let's assume that we know F(S)F(S) where some change val_1, val_2, \ldotsval
​1
​​ ,val
​2
​​ ,… for SS which is optimal and the last coin's denomination is CC. Then the following equation should be true because of optimal substructure of the problem:

F(S) = F(S - C) + 1 F(S)=F(S−C)+1

choose the minimum among them. The following recurrence relation holds:

F(S)=mini=0...n−1F(S−ci)+1subject to  S−ci≥0
F(S)=0 ,when S=0F(S)=−1 ,when n=0
Recursion tree for finding coin change of amount 6 with coin denominations {1,2,3}.

In the recursion tree above, we could see that a lot of subproblems were calculated multiple times. For example the problem F(1)F(1) was calculated 1313 times. Therefore we should cache the solutions to the subproblems in a table and access them in constant time when necessary

Algorithm

The idea of the algorithm is to build the solution of the problem from top to bottom. It applies the idea described above. It use backtracking and cut the partial solutions in the recursive tree, which doesn't lead to a viable solution. Тhis happens when we try to make a change of a coin with a value greater than the amount SS. To improve time complexity we should store the solutions of the already calculated subproblems in a table.