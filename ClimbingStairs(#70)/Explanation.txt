The problem is a dynamic programming one.
Here are the steps to get the solution incrementally.

Base cases:
if n <= 0, then the number of ways should be zero.
if n == 1, then there is only way to climb the stair.
if n == 2, then there are two ways to climb the stairs. One solution is one step by another; the other one is two steps at one time.

The key intuition to solve the problem is that given a number of stairs n, if we know the number ways to get to the points [n-1] and [n-2] respectively, denoted as n1 and n2 , then the total ways to get to the point [n] is n1 + n2. Because from the [n-1] point, we can take one single step to reach [n]. And from the [n-2] point, we could take two steps to get there. 

Most Importment: There is NO overlapping between these two solution sets, because we differ in the final step.

For n = 3, we set one_step_before = 2, because get to step 2 we have 2 ways;

then we set two_step_before = 3, because get to step 1 we have one 1 way;

we use these two as the basic steps to go.