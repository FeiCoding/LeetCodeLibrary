Explanation for: 


	int RowIndex = 3*(i/3);
	int ColIndex = 3*(i%3);
	if(board[RowIndex + j/3][ColIndex + j%3]!='.' 
	&& !cube.add(board[RowIndex + j/3][ColIndex + j%3]))
            return false;


For (i, j) = (4, 5), consider which block we are looking at? That is cube i = 4, but to make calculation of x, y easier, we have to change that into 2D coordinate: cube (4 / 3, 4 % 3) = (1, 1). Now, we use j to traverse within this cube. But how do we do that? Well, we first determine the base of this cube, which is its topleft corner. It is easy to calculate as (1 * 3, 1 * 3) = (3, 3). Now we just have to get the bi-directional offsets from (3,3) to the position (4, 5) within the same cube. That offset is also easy to calculate: (j / 3, j % 3) = (1, 2).